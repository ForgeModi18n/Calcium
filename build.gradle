buildscript {
    def config = new Properties()
    project.ext.buildConfigFile = file('build.properties')
    buildConfigFile.withInputStream(config.&load)
    project.ext.config = config
    project.ext.buildDate = new Date()

    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
        google()
    }

    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: config.forge_gradle_version, changing: false
        classpath group: 'org.parchmentmc', name: 'librarian', version: config.librarian_version
        classpath group: 'org.spongepowered', name: 'mixingradle', version: config.mixin_gradle_version
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'maven-publish'

version = "${config.project_version}.${(System.getenv("CI_PIPELINE_IID") ?: 0)}"
group = config.project_group
archivesBaseName = "${config.project_name}-${config.mc_version}"
sourceCompatibility = config.java_version
targetCompatibility = config.java_version

minecraft {
    mappings channel: 'parchment', version: "${config.parchment_version}-${config.mc_version}"
    accessTransformer = file("src/main/resources/META-INF/${config.project_id}_at.cfg")

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            property 'mixin.debug', 'true'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            jvmArgs '-Xms512M', '-Xmx4096M'

            mods {
                calcium {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            property 'mixin.debug', 'true'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            jvmArgs '-Xms512M', '-Xmx4096M'

            mods {
                calcium {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            property 'mixin.debug', 'true'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            jvmArgs '-Xms256M', '-Xmx2048M'

            args '--mod', config.project_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                calcium {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

mixin {
    add sourceSets.main, "mixins.refmap.${config.project_id}.json"
}

repositories {
    maven { url = 'https://maven.parchmentmc.org' }
    maven { url = 'https://maven.covers1624.net' }
    maven { url = 'https://cursemaven.com' }
    maven { url = 'https://thedarkcolour.github.io/KotlinForForge' }
    maven { url = 'https://dvs1.progwml6.com/files/maven' }
    maven { url = 'https://repo.spongepowered.org/maven' }
    mavenCentral()
    google()
}

dependencies {
    minecraft group: 'net.minecraftforge', name: 'forge', version: "${config.mc_version}-${config.forge_version}"

    implementation group: 'org.jetbrains', name: 'annotations', version: config.annotations_version

    implementation fg.deobf(group: 'codechicken', name: 'CodeChickenLib', version: "${config.mc_version}-${config.ccl_version}", classifier: 'deobf')
    implementation fg.deobf(group: 'curse.maven', name: 'sodium-reforged-532724', version: config.magnesium_version)

    implementation fg.deobf(group: 'curse.maven', name: 'mantle-74924', version: config.mantle_version)
    implementation fg.deobf(group: 'curse.maven', name: 'tinkers-construct-74072', version: config.tconstruct_version)

    runtimeOnly group: 'net.minecraftforge', name: 'Scorge', version: config.scorge_version
    runtimeOnly fg.deobf(group: 'codechicken', name: 'CBMultipart', version: "${config.mc_version}-${config.cbm_version}", classifier: 'deobf')

    runtimeOnly fg.deobf(group: 'mrtjp', name: 'ProjectRed', version: "${config.mc_version}-${config.pr_version}", classifier: 'core')
    runtimeOnly fg.deobf(group: 'mrtjp', name: 'ProjectRed', version: "${config.mc_version}-${config.pr_version}", classifier: 'exploration')
    runtimeOnly fg.deobf(group: 'mrtjp', name: 'ProjectRed', version: "${config.mc_version}-${config.pr_version}", classifier: 'transmission')
    runtimeOnly fg.deobf(group: 'mrtjp', name: 'ProjectRed', version: "${config.mc_version}-${config.pr_version}", classifier: 'illumination')
    runtimeOnly fg.deobf(group: 'mrtjp', name: 'ProjectRed', version: "${config.mc_version}-${config.pr_version}", classifier: 'integration')
}

configurations {
    annotationProcessor.extendsFrom minecraft
}

jar {
    finalizedBy('reobfJar')

    manifest {
        attributes([
                //@formatter:off
                'MixinConfigs':             "mixins.${config.project_id}.json,mixins.${config.project_id}.ccl.json,mixins.${config.project_id}.tic.json",
                'Specification-Title': 		config.project_name,
                'Specification-Vendor': 	'Karma Krafts',
                'Specification-Version': 	'1',
                'Implementation-Title': 	config.project_name,
                'Implementation-Version': 	project.version,
                'Implementation-Vendor': 	'Karma Krafts',
                'Implementation-Timestamp': buildDate.format("yyyy-MM-dd'T'HH:mm:ssZ")
                //@formatter:on
        ])
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives jar
    archives sourcesJar
}

tasks.withType(JavaCompile) {
    sourceCompatibility = config.java_version
    targetCompatibility = config.java_version
    options.encoding = 'UTF-8'
}

publishing {
    repositories {
        if (System.getenv('MAVEN_PASSWORD')) {
            maven {
                url "https://nexus.covers1624.net/repository/karmakrafts-releases/"

                credentials {
                    username 'kitsunealex'
                    password System.getenv('MAVEN_PASSWORD')
                }
            }
        }
    }
    publications {
        calcium(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            artifact jar
            artifact sourcesJar

            pom {
                name = archivesBaseName
                description = archivesBaseName
                url = "https://git.karmakrafts.dev/kk/mc-projects/${config.project_id}".toString()

                scm {
                    url = "https://git.karmakrafts.dev/kk/mc-projects/${config.project_id}".toString()
                }

                issueManagement {
                    system = 'gitlab'
                    url = "https://git.karmakrafts.dev/kk/mc-projects/${config.project_id}/issues".toString()
                }

                licenses {
                    license {
                        name = "The MIT License"
                        url = "https://git.karmakrafts.dev/kk/mc-projects/${config.project_id}/-/blob/master/LICENSE"
                        distribution = 'repo'
                    }
                }

                developers {
                    developer {
                        id = 'kitsunealex'
                        name = 'KitsuneAlex'
                    }
                }
            }
        }
    }
}
